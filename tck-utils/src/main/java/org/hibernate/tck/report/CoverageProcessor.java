package org.hibernate.tck.report;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.util.ArrayList;import java.util.List;import com.sun.mirror.apt.AnnotationProcessor;import com.sun.mirror.apt.AnnotationProcessorEnvironment;import com.sun.mirror.declaration.AnnotationTypeDeclaration;import com.sun.mirror.declaration.Declaration;import com.sun.mirror.declaration.MethodDeclaration;import com.sun.mirror.util.DeclarationVisitors;import com.sun.mirror.util.SimpleDeclarationVisitor;import org.hibernate.tck.annotations.SpecAssertion;import org.hibernate.tck.annotations.SpecAssertions;/** * Annotation processor for generating TCK coverage report * * @author Shane Bryzak */public class CoverageProcessor implements AnnotationProcessor {	private static final String OUTDIR_OPTION_FLAG = "-s";	private static final String AUDITFILE_OPTION_FLAG = "-a";	private static final String REPORT_FILE_NAME = "coverage.html";	private static final String DEFAULT_AUDIT_FILE_NAME = "tck-audit.xml";	private final AnnotationProcessorEnvironment env;	private final List<SpecReference> references = new ArrayList<SpecReference>();	private AuditParser auditParser;	private File baseDir;	public CoverageProcessor(AnnotationProcessorEnvironment env) {		this.env = env;		createOutputDir( env );		InputStream in = getAuditFileInputStream( env );		if ( in == null ) {			return;		}		try {			auditParser = new AuditParser( in );			auditParser.parse();		}		catch ( Exception e ) {			throw new RuntimeException( "Unable to parse audit file." );		}	}	private InputStream getAuditFileInputStream(AnnotationProcessorEnvironment env) {		InputStream in;		String auditFileName = env.getOptions().get( AUDITFILE_OPTION_FLAG );		if ( auditFileName == null || auditFileName.length() == 0 ) {			env.getMessager()					.printNotice( "No audit file specified on the command line. Trying default: " + DEFAULT_AUDIT_FILE_NAME );			auditFileName = DEFAULT_AUDIT_FILE_NAME;		}		try {			in = new FileInputStream( auditFileName );		}		catch ( IOException ex ) {			env.getMessager().printWarning( "Unable to open audit file - " + auditFileName );			env.getMessager().printWarning( "No report generated" );			return null;		}		return in;	}	private void createOutputDir(AnnotationProcessorEnvironment env) {		String baseDirName = env.getOptions().get( OUTDIR_OPTION_FLAG );		baseDir = new File( baseDirName );		baseDir.mkdirs();	}	public void process() {		if ( auditParser == null ) {			return;		}		AnnotationTypeDeclaration annotationType = ( AnnotationTypeDeclaration )				env.getTypeDeclaration( SpecAssertion.class.getCanonicalName() );		for ( Declaration d : env.getDeclarationsAnnotatedWith( annotationType ) ) {			d.accept(					DeclarationVisitors.getDeclarationScanner(							new CreateReferenceVisitor(), DeclarationVisitors.NO_OP					)			);		}		annotationType = ( AnnotationTypeDeclaration )				env.getTypeDeclaration( SpecAssertions.class.getCanonicalName() );		for ( Declaration d : env.getDeclarationsAnnotatedWith( annotationType ) ) {			d.accept(					DeclarationVisitors.getDeclarationScanner(							new CreateReferenceVisitor(), DeclarationVisitors.NO_OP					)			);		}		new CoverageReport( references, auditParser ).writeToFile( new File( baseDir, REPORT_FILE_NAME ) );	}	private class CreateReferenceVisitor extends SimpleDeclarationVisitor {		public void visitMethodDeclaration(MethodDeclaration d) {			SpecAssertions assertions = d.getAnnotation( SpecAssertions.class );			if ( assertions != null ) {				for ( SpecAssertion assertion : assertions.value() ) {					SpecReference ref = new SpecReference(							assertion.section(), assertion.id(),							d.getDeclaringType().getSimpleName(), d.getSimpleName()					);					references.add( ref );				}			}			SpecAssertion assertion = d.getAnnotation( SpecAssertion.class );			if ( assertion != null ) {				SpecReference ref = new SpecReference(						assertion.section(), assertion.id(),						d.getDeclaringType().getSimpleName(), d.getSimpleName()				);				references.add( ref );			}		}	}}