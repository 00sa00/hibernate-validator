# Language zh-CN translations for PACKAGE package.
# Automatically generated, 2010.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-07-06 14:46+0000\n"
"PO-Revision-Date: 2010-07-06 14:46+0000\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: usingvalidator.xml:25
#, no-c-format
msgid "Validation step by step"
msgstr ""

#. Tag: para
#: usingvalidator.xml:27
#, no-c-format
msgid ""
"In this chapter we will see in more detail how to use Hibernate Validator to "
"validate constraints for a given entity model. We will also learn which "
"default constraints the Bean Validation specification provides and which "
"additional constraints are only provided by Hibernate Validator. Let's start "
"with how to add constraints to an entity."
msgstr ""

#. Tag: title
#: usingvalidator.xml:34
#, no-c-format
msgid "Defining constraints"
msgstr ""

#. Tag: para
#: usingvalidator.xml:36
#, no-c-format
msgid ""
"Constraints in Bean Validation are expressed via Java annotations. In this "
"section we show how to annotate an object model with these annotations. We "
"have to differentiate between three different type of constraint annotations "
"- field-, property-, and class-level annotations."
msgstr ""

#. Tag: para
#: usingvalidator.xml:43
#, no-c-format
msgid ""
"Not all constraints can be placed on all of these levels. In fact, none of "
"the default constraints defined by Bean Validation can be placed at class "
"level. The <classname>java.lang.annotation.Target</classname> annotation in "
"the constraint annotation itself determines on which elements a constraint "
"can be placed. See <xref linkend=\"validator-customconstraints\"/> for more "
"information."
msgstr ""

#. Tag: title
#: usingvalidator.xml:52
#, no-c-format
msgid "Field-level constraints"
msgstr ""

#. Tag: para
#: usingvalidator.xml:54
#, no-c-format
msgid ""
"Constraints can be expressed by annotating a field of a class. <xref linkend="
"\"example-field-level\"/> shows a field level configuration example:"
msgstr ""

#. Tag: title
#: usingvalidator.xml:59
#, no-c-format
msgid "Field level constraint"
msgstr ""

#. Tag: programlisting
#: usingvalidator.xml:61
#, no-c-format
msgid ""
"package com.mycompany;\n"
"\n"
"import javax.validation.constraints.NotNull;\n"
"\n"
"public class Car {\n"
"\n"
"    @NotNull\n"
"    private String manufacturer;\n"
"\n"
"    @AssertTrue\n"
"    private boolean isRegistered;\n"
"\n"
"    public Car(String manufacturer, boolean isRegistered) {\n"
"        super();\n"
"        this.manufacturer = manufacturer;\n"
"        this.isRegistered = isRegistered;\n"
"    }\n"
"}"
msgstr ""

#. Tag: para
#: usingvalidator.xml:64
#, no-c-format
msgid ""
"When using field level constraints field access strategy is used to access "
"the value to be validated. This means the bean validation provider directly "
"accesses the instance variable and does not invoke the property accessor "
"method also if such a method exists."
msgstr ""

#. Tag: para
#: usingvalidator.xml:70
#, no-c-format
msgid "The access type (private, protected or public) does not matter."
msgstr ""

#. Tag: para
#: usingvalidator.xml:75
#, no-c-format
msgid "Static fields and properties cannot be validated."
msgstr ""

#. Tag: title
#: usingvalidator.xml:80
#, no-c-format
msgid "Property-level constraints"
msgstr ""

#. Tag: para
#: usingvalidator.xml:82
#, no-c-format
msgid ""
"If your model class adheres to the <ulink type=\"\" url=\"http://java.sun."
"com/javase/technologies/desktop/javabeans/index.jsp\">JavaBeans</ulink> "
"standard, it is also possible to annotate the properties of a bean class "
"instead of its fields. <xref linkend=\"example-property-level\"/> uses the "
"same entity as in <xref linkend=\"example-field-level\"/>, however, property "
"level constraints are used."
msgstr ""

#. Tag: para
#: usingvalidator.xml:88
#, no-c-format
msgid "The property's getter method has to be annotated, not its setter."
msgstr ""

#. Tag: title
#: usingvalidator.xml:93
#, no-c-format
msgid "Property level constraint"
msgstr ""

#. Tag: programlisting
#: usingvalidator.xml:95
#, no-c-format
msgid ""
"package com.mycompany;\n"
"\n"
"import javax.validation.constraints.AssertTrue;\n"
"import javax.validation.constraints.NotNull;\n"
"\n"
"public class Car {\n"
"\n"
"    private String manufacturer;\n"
"\n"
"    private boolean isRegistered;\n"
"      \n"
"    public Car(String manufacturer, boolean isRegistered) {\n"
"        super();\n"
"        this.manufacturer = manufacturer;\n"
"        this.isRegistered = isRegistered;\n"
"    }\n"
"\n"
"    @NotNull\n"
"    public String getManufacturer() {\n"
"        return manufacturer;\n"
"    }\n"
"\n"
"    public void setManufacturer(String manufacturer) {\n"
"        this.manufacturer = manufacturer;\n"
"    }\n"
"\n"
"    @AssertTrue\n"
"    public boolean isRegistered() {\n"
"        return isRegistered;\n"
"    }\n"
"\n"
"    public void setRegistered(boolean isRegistered) {\n"
"        this.isRegistered = isRegistered;\n"
"    }\n"
"}"
msgstr ""

#. Tag: para
#: usingvalidator.xml:98
#, no-c-format
msgid ""
"When using property level constraints property access strategy is used to "
"access the value to be validated. This means the bean validation provider "
"accesses the state via the property accessor method."
msgstr ""

#. Tag: para
#: usingvalidator.xml:103
#, no-c-format
msgid ""
"It is recommended to stick either to field <emphasis>or</emphasis> property "
"annotation within one class. It is not recommended to annotate a field "
"<emphasis>and</emphasis> the accompanying getter method as this would cause "
"the field to be validated twice."
msgstr ""

#. Tag: title
#: usingvalidator.xml:112
#, no-c-format
msgid "Class-level constraints"
msgstr ""

#. Tag: para
#: usingvalidator.xml:115
#, no-c-format
msgid ""
"Last but not least, a constraint can also be placed on class level. When a "
"constraint annotation is placed on this level the class instance itself "
"passed to the <classname>ConstraintValidator</classname>. Class level "
"constraints are useful if it is necessary to inspect more than a single "
"property of the class to validate it or if a correlation between different "
"state variables has to be evaluated. In <xref linkend=\"example-class-level"
"\"/> we add the property <property>passengers</property> to the class "
"<classname>Car</classname>. We also add the constraint "
"<classname>PassengerCount</classname> on the class level. We will later see "
"how we can actually create this custom constraint (see <xref linkend="
"\"validator-customconstraints\"/>). For now we it is enough to know that "
"<classname>PassengerCount</classname> will ensure that there cannot be more "
"passengers in a car than there are seats."
msgstr ""

#. Tag: title
#: usingvalidator.xml:131
#, no-c-format
msgid "Class level constraint"
msgstr ""

#. Tag: programlisting
#: usingvalidator.xml:133
#, no-c-format
msgid ""
"package com.mycompany;\n"
"\n"
"import javax.validation.constraints.Min;\n"
"import javax.validation.constraints.NotNull;\n"
"import javax.validation.constraints.Size;\n"
"\n"
"@PassengerCount\n"
"public class Car {\n"
"\n"
"    @NotNull\n"
"    private String manufacturer;\n"
"\n"
"    @NotNull\n"
"    @Size(min = 2, max = 14)\n"
"    private String licensePlate;\n"
"\n"
"    @Min(2)\n"
"    private int seatCount;\n"
"    \n"
"    private List&lt;Person&gt; passengers;\n"
"    \n"
"    public Car(String manufacturer, String licencePlate, int seatCount) {\n"
"        this.manufacturer = manufacturer;\n"
"        this.licensePlate = licencePlate;\n"
"        this.seatCount = seatCount;\n"
"    }\n"
"\n"
"    //getters and setters ...\n"
"}"
msgstr ""

#. Tag: title
#: usingvalidator.xml:138
#, no-c-format
msgid "Constraint inheritance"
msgstr ""

#. Tag: para
#: usingvalidator.xml:140
#, no-c-format
msgid ""
"When validating an object that implements an interface or extends another "
"class, all constraint annotations on the implemented interface and parent "
"class apply in the same manner as the constraints specified on the validated "
"object itself. To make things clearer let's have a look at the following "
"example:"
msgstr ""

#. Tag: title
#: usingvalidator.xml:147
#, no-c-format
msgid "Constraint inheritance using RentalCar"
msgstr ""

#. Tag: programlisting
#: usingvalidator.xml:149
#, no-c-format
msgid ""
"package com.mycompany;\n"
"\n"
"import javax.validation.constraints.NotNull;\n"
"\n"
"public class RentalCar extends Car {\n"
"\n"
"    private String rentalStation;\n"
"    \n"
"    public RentalCar(String manufacturer, String rentalStation) {\n"
"        super(manufacturer);\n"
"        this.rentalStation = rentalStation;\n"
"    }\n"
"    \n"
"    @NotNull\n"
"    public String getRentalStation() {\n"
"        return rentalStation;\n"
"    }\n"
"\n"
"    public void setRentalStation(String rentalStation) {\n"
"        this.rentalStation = rentalStation;\n"
"    }\n"
"}"
msgstr ""

#. Tag: para
#: usingvalidator.xml:152
#, no-c-format
msgid ""
"Our well-known class <classname>Car</classname> is now extended by "
"<classname>RentalCar</classname> with the additional property "
"<property>rentalStation</property>. If an instance of <classname>RentalCar</"
"classname> is validated, not only the <classname>@NotNull</classname> "
"constraint on <property>rentalStation</property> is validated, but also the "
"constraint on <property>manufacturer</property> from the parent class."
msgstr ""

#. Tag: para
#: usingvalidator.xml:160
#, no-c-format
msgid ""
"The same would hold true, if <classname>Car</classname> were an interface "
"implemented by <classname>RentalCar</classname>."
msgstr ""

#. Tag: para
#: usingvalidator.xml:163
#, no-c-format
msgid ""
"Constraint annotations are aggregated if methods are overridden. If "
"<classname>RentalCar</classname> would override the "
"<methodname>getManufacturer()</methodname> method from <classname>Car</"
"classname> any constraints annotated at the overriding method would be "
"evaluated in addition to the <classname>@NotNull</classname> constraint from "
"the super-class."
msgstr ""

#. Tag: title
#: usingvalidator.xml:172
#, no-c-format
msgid "Object graphs"
msgstr ""

#. Tag: para
#: usingvalidator.xml:174
#, no-c-format
msgid ""
"The Bean Validation API does not only allow to validate single class "
"instances but also complete object graphs. To do so, just annotate a field "
"or property representing a reference to another object with "
"<classname>@Valid</classname>. If the parent object is validated, all "
"referenced objects annotated with <classname>@Valid</classname> will be "
"validated as well (as will be their children etc.). See <xref linkend="
"\"example-car-with-driver\"/>."
msgstr ""

#. Tag: title
#: usingvalidator.xml:183
#, no-c-format
msgid "Class Person"
msgstr ""

#. Tag: programlisting
#: usingvalidator.xml:185
#, no-c-format
msgid ""
"package com.mycompany;\n"
"\n"
"import javax.validation.constraints.NotNull;\n"
"\n"
"public class Person {\n"
"\n"
"    @NotNull\n"
"    private String name;\n"
"    \n"
"    public Person(String name) {\n"
"        super();\n"
"        this.name = name;\n"
"    }\n"
"\n"
"    public String getName() {\n"
"        return name;\n"
"    }\n"
"\n"
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"}"
msgstr ""

#. Tag: title
#: usingvalidator.xml:189
#, no-c-format
msgid "Adding a driver to the car"
msgstr ""

#. Tag: programlisting
#: usingvalidator.xml:191
#, no-c-format
msgid ""
"package com.mycompany;\n"
"\n"
"import javax.validation.Valid;\n"
"import javax.validation.constraints.NotNull;\n"
"\n"
"public class Car {\n"
"\n"
"    @NotNull\n"
"    @Valid\n"
"    private Person driver;\n"
"    \n"
"    public Car(Person driver) {\n"
"        this.driver = driver;\n"
"    }\n"
"\n"
"    //getters and setters ...\n"
"}"
msgstr ""

#. Tag: para
#: usingvalidator.xml:194
#, no-c-format
msgid ""
"If an instance of <classname>Car</classname> is validated, the referenced "
"<classname>Person</classname> object will be validated as well, as the "
"<property>driver</property> field is annotated with <classname>@Valid</"
"classname>. Therefore the validation of a <classname>Car</classname> will "
"fail if the <property>name</property> field of the referenced "
"<classname>Person</classname> instance is <code>null</code>."
msgstr ""

#. Tag: para
#: usingvalidator.xml:202
#, no-c-format
msgid ""
"Object graph validation also works for collection-typed fields. That means "
"any attributes that"
msgstr ""

#. Tag: para
#: usingvalidator.xml:207
#, no-c-format
msgid "are arrays"
msgstr ""

#. Tag: para
#: usingvalidator.xml:211
#, no-c-format
msgid ""
"implement <classname>java.lang.Iterable</classname> (especially "
"<classname>Collection</classname>, <classname>List</classname> and "
"<classname>Set</classname>)"
msgstr ""

#. Tag: para
#: usingvalidator.xml:217
#, no-c-format
msgid "implement <classname>java.util.Map</classname>"
msgstr ""

#. Tag: para
#: usingvalidator.xml:221
#, no-c-format
msgid ""
"can be annotated with <classname>@Valid</classname>, which will cause each "
"contained element to be validated, when the parent object is validated."
msgstr ""

#. Tag: title
#: usingvalidator.xml:226
#, no-c-format
msgid "Car with a list of passengers"
msgstr ""

#. Tag: programlisting
#: usingvalidator.xml:228
#, no-c-format
msgid ""
"package com.mycompany;\n"
"\n"
"import java.util.ArrayList;\n"
"import java.util.List;\n"
"\n"
"import javax.validation.Valid;\n"
"import javax.validation.constraints.NotNull;\n"
"\n"
"public class Car {\n"
"\n"
"    @NotNull\n"
"    @Valid\n"
"    private List&lt;Person&gt; passengers = new ArrayList&lt;Person&gt;();\n"
"\n"
"    public Car(List&lt;Person&gt; passengers) {\n"
"        this.passengers = passengers;\n"
"    }\n"
"\n"
"    //getters and setters ...\n"
"}"
msgstr ""

#. Tag: para
#: usingvalidator.xml:231
#, no-c-format
msgid ""
"If a <classname>Car</classname> instance is validated, a "
"<classname>ConstraintValidation</classname> will be created, if any of the "
"<classname>Person</classname> objects contained in the <property>passengers</"
"property> list has a <code>null</code> name."
msgstr ""

#. Tag: para
#: usingvalidator.xml:235
#, no-c-format
msgid ""
"<classname>null</classname> values are getting ignored when validating "
"object graphs."
msgstr ""

#. Tag: title
#: usingvalidator.xml:242
#, no-c-format
msgid "Validating constraints"
msgstr ""

#. Tag: para
#: usingvalidator.xml:244
#, no-c-format
msgid ""
"The <classname>Validator</classname> interface is the main entry point to "
"Bean Validation. In <xref linkend=\"section-validator-instance\"/> we will "
"first show how to obtain an <classname>Validator</classname> instance. "
"Afterwards we will learn how to use the different methods of the "
"<classname>Validator</classname> interface."
msgstr ""

#. Tag: title
#: usingvalidator.xml:251
#, no-c-format
msgid "Obtaining a <classname>Validator</classname> instance"
msgstr ""

#. Tag: para
#: usingvalidator.xml:253
#, no-c-format
msgid ""
"The first step towards validating an entity instance is to get hold of a "
"<classname>Validator</classname> instance. The road to this instance leads "
"via the <classname>Validation</classname> class and a "
"<classname>ValidatorFactory</classname>. The easiest way is to use the "
"static <methodname>Validation.buildDefaultValidatorFactory()</methodname> "
"method:"
msgstr ""

#. Tag: title
#: usingvalidator.xml:262
#, no-c-format
msgid "Validation.buildDefaultValidatorFactory()"
msgstr ""

#. Tag: programlisting
#: usingvalidator.xml:264
#, no-c-format
msgid ""
"ValidatorFactory factory = Validation.buildDefaultValidatorFactory();\n"
"Validator validator = factory.getValidator();"
msgstr ""

#. Tag: para
#: usingvalidator.xml:267
#, no-c-format
msgid ""
"For other ways of obtaining a Validator instance see <xref linkend="
"\"validator-bootstrapping\"/>. For now we just want to see how we can use "
"the <classname>Validator</classname> instance to validate entity instances."
msgstr ""

#. Tag: title
#: usingvalidator.xml:274
#, no-c-format
msgid "Validator methods"
msgstr ""

#. Tag: para
#: usingvalidator.xml:276
#, no-c-format
msgid ""
"The <classname>Validator</classname> interface contains three methods that "
"can be used to either validate entire entities or just a single properties "
"of the entity."
msgstr ""

#. Tag: para
#: usingvalidator.xml:280
#, no-c-format
msgid ""
"All three methods return a <classname>Set&lt;ConstraintViolation&gt;</"
"classname>. The set is empty, if the validation succeeds. Otherwise a "
"<classname>ConstraintViolation</classname> instance is added for each "
"violated constraint."
msgstr ""

#. Tag: para
#: usingvalidator.xml:286
#, no-c-format
msgid ""
"All the validation methods have a var-args parameter which can be used to "
"specify, which validation groups shall be considered when performing the "
"validation. If the parameter is not specified the default validation group "
"(<classname>javax.validation.groups.Default</classname>) will be used. We "
"will go into more detail on the topic of validation groups in"
msgstr ""

#. Tag: methodname
#: usingvalidator.xml:295
#, no-c-format
msgid "validate"
msgstr ""

#. Tag: para
#: usingvalidator.xml:297
#, no-c-format
msgid ""
"Use the <methodname>validate()</methodname> method to perform validation of "
"all constraints of a given entity instance (see <xref linkend=\"example-"
"validator-validate\"/> )."
msgstr ""

#. Tag: title
#: usingvalidator.xml:302
#, no-c-format
msgid "Usage of <methodname>Validator.validate()</methodname>"
msgstr ""

#. Tag: programlisting
#: usingvalidator.xml:305
#, no-c-format
msgid ""
"ValidatorFactory factory = Validation.buildDefaultValidatorFactory();\n"
"Validator validator = factory.getValidator();\n"
"\n"
"Car car = new Car(null);\n"
"\n"
"Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = validator."
"validate(car);\n"
"\n"
"assertEquals(1, constraintViolations.size());\n"
"assertEquals(\"may not be null\", constraintViolations.iterator().next()."
"getMessage());"
msgstr ""

#. Tag: methodname
#: usingvalidator.xml:310
#, no-c-format
msgid "validateProperty"
msgstr ""

#. Tag: para
#: usingvalidator.xml:312
#, no-c-format
msgid ""
"With help of the <methodname>validateProperty()</methodname> a single named "
"property of a given object can be validated. The property name is the "
"JavaBeans property name."
msgstr ""

#. Tag: title
#: usingvalidator.xml:317
#, no-c-format
msgid "Usage of <methodname>Validator.validateProperty()</methodname>"
msgstr ""

#. Tag: programlisting
#: usingvalidator.xml:320
#, no-c-format
msgid ""
"Validator validator = Validation.buildDefaultValidatorFactory().getValidator"
"();\n"
"\n"
"Car car = new Car(null);\n"
"\n"
"Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = validator."
"validateProperty(car, \"manufacturer\");\n"
"\n"
"assertEquals(1, constraintViolations.size());\n"
"assertEquals(\"may not be null\", constraintViolations.iterator().next()."
"getMessage());"
msgstr ""

#. Tag: para
#: usingvalidator.xml:323
#, no-c-format
msgid ""
"<methodname>Validator.validateProperty</methodname> is for example used in "
"the integration of Bean Validation into JSF 2 (see <xref linkend=\"section-"
"presentation-layer\"/>)."
msgstr ""

#. Tag: methodname
#: usingvalidator.xml:329
#, no-c-format
msgid "validateValue"
msgstr ""

#. Tag: para
#: usingvalidator.xml:331
#, no-c-format
msgid ""
"Using the <methodname>validateValue() </methodname>method you can check, "
"whether a single property of a given class can be validated successfully, if "
"the property had the specified value:"
msgstr ""

#. Tag: title
#: usingvalidator.xml:336
#, no-c-format
msgid "Usage of <methodname>Validator.validateValue()</methodname>"
msgstr ""

#. Tag: programlisting
#: usingvalidator.xml:339
#, no-c-format
msgid ""
"Validator validator = Validation.buildDefaultValidatorFactory().getValidator"
"();\n"
"\n"
"Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = validator."
"validateValue(Car.class, \"manufacturer\", null);\n"
"\n"
"assertEquals(1, constraintViolations.size());\n"
"assertEquals(\"may not be null\", constraintViolations.iterator().next()."
"getMessage());"
msgstr ""

#. Tag: para
#: usingvalidator.xml:343
#, no-c-format
msgid ""
"<classname>@Valid</classname> is not honored by <methodname>validateProperty"
"()</methodname> or <methodname>validateValue()</methodname>."
msgstr ""

#. Tag: title
#: usingvalidator.xml:351
#, no-c-format
msgid "<classname>ConstraintViolation</classname> methods"
msgstr ""

#. Tag: para
#: usingvalidator.xml:353
#, no-c-format
msgid ""
"Now it is time to have a closer look at what a "
"<classname>ConstraintViolation</classname>. Using the different methods of "
"<classname>ConstraintViolation</classname> a lot of useful information about "
"the cause of the validation failure can be determined. <xref linkend=\"table-"
"constraint-violation\"/> gives an overview of these methods:"
msgstr ""

#. Tag: title
#: usingvalidator.xml:361
#, no-c-format
msgid "The various <classname>ConstraintViolation</classname> methods"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:367
#, no-c-format
msgid "Method"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:369
#, no-c-format
msgid "Usage"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:371
#, no-c-format
msgid "Example (referring to <xref linkend=\"example-validator-validate\"/>)"
msgstr ""

#. Tag: methodname
#: usingvalidator.xml:378
#, no-c-format
msgid "getMessage()"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:380
#, no-c-format
msgid "The interpolated error message."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:382
#, no-c-format
msgid "may not be null"
msgstr ""

#. Tag: methodname
#: usingvalidator.xml:386
#, no-c-format
msgid "getMessageTemplate()"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:388
#, no-c-format
msgid "The non-interpolated error message."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:390
#, no-c-format
msgid "{javax.validation.constraints.NotNull.message}"
msgstr ""

#. Tag: methodname
#: usingvalidator.xml:394
#, no-c-format
msgid "getRootBean()"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:396
#, no-c-format
msgid "The root bean being validated."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:398 usingvalidator.xml:416
#, no-c-format
msgid "<entry>car</entry>"
msgstr ""

#. Tag: methodname
#: usingvalidator.xml:402
#, no-c-format
msgid "getRootBeanClass()"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:404
#, no-c-format
msgid "The class of the root bean being validated."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:406
#, no-c-format
msgid "Car.class"
msgstr ""

#. Tag: methodname
#: usingvalidator.xml:410
#, no-c-format
msgid "getLeafBean()"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:412
#, no-c-format
msgid ""
"If a bean constraint, the bean instance the constraint is applied on. If a "
"property constraint, the bean instance hosting the property the constraint "
"is applied on."
msgstr ""

#. Tag: methodname
#: usingvalidator.xml:420
#, no-c-format
msgid "getPropertyPath()"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:422
#, no-c-format
msgid "The property path to the value from root bean."
msgstr ""

#. Tag: methodname
#: usingvalidator.xml:428
#, no-c-format
msgid "getInvalidValue()"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:430
#, no-c-format
msgid "The value failing to pass the constraint."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:432
#, no-c-format
msgid "passengers"
msgstr ""

#. Tag: methodname
#: usingvalidator.xml:436
#, no-c-format
msgid "getConstraintDescriptor()"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:438
#, no-c-format
msgid "Constraint metadata reported to fail."
msgstr ""

#. Tag: title
#: usingvalidator.xml:448
#, no-c-format
msgid "Message interpolation"
msgstr ""

#. Tag: para
#: usingvalidator.xml:450
#, no-c-format
msgid ""
"As we will see in <xref linkend=\"validator-customconstraints\"/> each "
"constraint definition must define a default message descriptor. This message "
"can be overridden at declaration time using the <methodname>message</"
"methodname> attribute of the constraint. You can see this in <xref linkend="
"\"example-driver\"/>. This message descriptors get interpolated when a "
"constraint validation fails using the configured "
"<classname>MessageInterpolator</classname>. The interpolator will try to "
"resolve any message parameters, meaning string literals enclosed in braces. "
"In order to resolve these parameters Hibernate Validator's default "
"<classname>MessageInterpolator</classname> first recursively resolves "
"parameters against a custom <classname>ResourceBundle</classname> called "
"<filename>ValidationMessages.properties</filename> at the root of the "
"classpath (It is up to you to create this file). If no further replacements "
"are possible against the custom bundle the default "
"<classname>ResourceBundle</classname> under <filename>/org/hibernate/"
"validator/ValidationMessages.properties</filename> gets evaluated. If a "
"replacement occurs against the default bundle the algorithm looks again at "
"the custom bundle (and so on). Once no further replacements against these "
"two resource bundles are possible remaining parameters are getting resolved "
"against the attributes of the constraint to be validated."
msgstr ""

#. Tag: para
#: usingvalidator.xml:473
#, no-c-format
msgid ""
"Since the braces { and } have special meaning in the messages they need to "
"be escaped if they are used literally. The following The following rules "
"apply:"
msgstr ""

#. Tag: para
#: usingvalidator.xml:477
#, no-c-format
msgid "\\{ is considered as the literal {"
msgstr ""

#. Tag: para
#: usingvalidator.xml:481
#, no-c-format
msgid "\\} is considered as the literal }"
msgstr ""

#. Tag: para
#: usingvalidator.xml:485
#, no-c-format
msgid "\\\\ is considered as the literal \\"
msgstr ""

#. Tag: para
#: usingvalidator.xml:489
#, no-c-format
msgid ""
"If the default message interpolator does not fit your requirements it is "
"possible to plug a custom <classname>MessageInterpolator</classname> when "
"the <classname>ValidatorFactory</classname> gets created. This can be seen "
"in <xref linkend=\"validator-bootstrapping\"/>."
msgstr ""

#. Tag: title
#: usingvalidator.xml:498
#, no-c-format
msgid "Validating groups"
msgstr ""

#. Tag: para
#: usingvalidator.xml:500
#, no-c-format
msgid ""
"Groups allow you to restrict the set of constraints applied during "
"validation. This makes for example wizard like validation possible where in "
"each step only a specified subset of constraints get validated. The groups "
"targeted are passed as var-args parameters to <methodname>validate</"
"methodname>, <methodname>validateProperty</methodname> and "
"<methodname>validateValue</methodname>. Let's have a look at an extended "
"<classname>Car</classname> with <classname>Driver</classname> example. First "
"we have the class <classname>Person</classname> (<xref linkend=\"example-"
"person\"/>) which has a <classname>@NotNull </classname>constraint on "
"<property>name</property>. Since no group is specified for this annotation "
"its default group is <classname>javax.validation.groups.Default</classname>."
msgstr ""

#. Tag: para
#: usingvalidator.xml:515
#, no-c-format
msgid ""
"When more than one group is requested, the order in which the groups are "
"evaluated is not deterministic. If no group is specified the default group "
"<classname>javax.validation.groups.Default</classname> is assumed."
msgstr ""

#. Tag: title
#: usingvalidator.xml:522
#, no-c-format
msgid "Person"
msgstr ""

#. Tag: programlisting
#: usingvalidator.xml:524
#, no-c-format
msgid ""
"public class Person {\n"
"    @NotNull\n"
"    private String name;\n"
"\n"
"    public Person(String name) {\n"
"        this.name = name;\n"
"    }\n"
"    // getters and setters ...\n"
"}"
msgstr ""

#. Tag: para
#: usingvalidator.xml:527
#, no-c-format
msgid ""
"Next we have the class <classname>Driver</classname> (<xref linkend="
"\"example-driver\"/>) extending <classname>Person</classname>. Here we are "
"adding the properties <property>age</property> and "
"<property>hasDrivingLicense</property>. In order to drive you must be at "
"least 18 (<classname>@Min(18)</classname>) and you must have a driving "
"license (<classname>@AssertTrue</classname>). Both constraints defined on "
"these properties belong to the group <classname>DriverChecks</classname>. As "
"you can see in <xref linkend=\"example-group-interfaces\"/> the group "
"<classname>DriverChecks</classname> is just a simple tagging interface. "
"Using interfaces makes the usage of groups type safe and allows for easy "
"refactoring. It also means that groups can inherit from each other via class "
"inheritance."
msgstr ""

#. Tag: para
#: usingvalidator.xml:541
#, no-c-format
msgid ""
"The Bean Validation specification does not enforce that groups have to be "
"interfaces. Non interface classes could be used as well, but we recommend to "
"stick to interfaces."
msgstr ""

#. Tag: title
#: usingvalidator.xml:547
#, no-c-format
msgid "Driver"
msgstr ""

#. Tag: programlisting
#: usingvalidator.xml:549
#, no-c-format
msgid ""
"public class Driver extends Person {\n"
"    @Min(value = 18, message = \"You have to be 18 to drive a car\", groups "
"= DriverChecks.class)\n"
"    public int age;\n"
"\n"
"    @AssertTrue(message = \"You first have to pass the driving test\", "
"groups = DriverChecks.class)\n"
"    public boolean hasDrivingLicense;\n"
"\n"
"    public Driver(String name) {\n"
"        super( name );\n"
"    }\n"
"\n"
"    public void passedDrivingTest(boolean b) {\n"
"        hasDrivingLicense = b;\n"
"    }\n"
"\n"
"    public int getAge() {\n"
"        return age;\n"
"    }\n"
"\n"
"    public void setAge(int age) {\n"
"        this.age = age;\n"
"    }\n"
"}"
msgstr ""

#. Tag: title
#: usingvalidator.xml:553
#, no-c-format
msgid "Group interfaces"
msgstr ""

#. Tag: programlisting
#: usingvalidator.xml:555
#, no-c-format
msgid ""
"public interface DriverChecks {\n"
"}\n"
"\n"
"public interface CarChecks {\n"
"}"
msgstr ""

#. Tag: para
#: usingvalidator.xml:558
#, no-c-format
msgid ""
"Last but not least we add the property <property>passedVehicleInspection</"
"property> to the <classname>Car</classname> class (<xref linkend=\"example-"
"car\"/>) indicating whether a car passed the road worthy tests."
msgstr ""

#. Tag: title
#: usingvalidator.xml:564
#, no-c-format
msgid "<title>Car</title>"
msgstr ""

#. Tag: programlisting
#: usingvalidator.xml:566
#, no-c-format
msgid ""
"public class Car {\n"
"    @NotNull\n"
"    private String manufacturer;\n"
"\n"
"    @NotNull\n"
"    @Size(min = 2, max = 14)\n"
"    private String licensePlate;\n"
"\n"
"    @Min(2)\n"
"    private int seatCount;\n"
"\n"
"    @AssertTrue(message = \"The car has to pass the vehicle inspection first"
"\", groups = CarChecks.class)\n"
"    private boolean passedVehicleInspection;\n"
"\n"
"    @Valid\n"
"    private Driver driver;\n"
"\n"
"    public Car(String manufacturer, String licencePlate, int seatCount) {\n"
"        this.manufacturer = manufacturer;\n"
"        this.licensePlate = licencePlate;\n"
"        this.seatCount = seatCount;\n"
"    }\n"
"}"
msgstr ""

#. Tag: para
#: usingvalidator.xml:569
#, no-c-format
msgid ""
"Overall three different groups are used in our example. <property>Person."
"name</property>, <property>Car.manufacturer</property>, <property>Car."
"licensePlate</property> and <property>Car.seatCount</property> all belong to "
"the <classname>Default</classname> group. <property>Driver.age</property> "
"and <property>Driver.hasDrivingLicense</property> belong to "
"<classname>DriverChecks</classname> and last but not least <property>Car."
"passedVehicleInspection</property> belongs to the group "
"<classname>CarChecks</classname>. <xref linkend=\"example-drive-away\"/> "
"shows how passing different group combinations to the <methodname>Validator."
"validate</methodname> method result in different validation results."
msgstr ""

#. Tag: title
#: usingvalidator.xml:583
#, no-c-format
msgid "Drive away"
msgstr ""

#. Tag: programlisting
#: usingvalidator.xml:585
#, no-c-format
msgid ""
"public class GroupTest {\n"
"\n"
"    private static Validator validator;\n"
"\n"
"    @BeforeClass\n"
"    public static void setUp() {\n"
"        ValidatorFactory factory = Validation.buildDefaultValidatorFactory"
"();\n"
"        validator = factory.getValidator();\n"
"    }\n"
"\n"
"    @Test\n"
"    public void driveAway() {\n"
"        // create a car and check that everything is ok with it.\n"
"        Car car = new Car( \"Morris\", \"DD-AB-123\", 2 );\n"
"        Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = "
"validator.validate( car );\n"
"        assertEquals( 0, constraintViolations.size() );\n"
"\n"
"        // but has it passed the vehicle inspection?\n"
"        constraintViolations = validator.validate( car, CarChecks.class );\n"
"        assertEquals( 1, constraintViolations.size() );\n"
"        assertEquals(\"The car has to pass the vehicle inspection first\", "
"constraintViolations.iterator().next().getMessage());\n"
"\n"
"        // let's go to the vehicle inspection\n"
"        car.setPassedVehicleInspection( true );\n"
"        assertEquals( 0, validator.validate( car ).size() );\n"
"\n"
"        // now let's add a driver. He is 18, but has not passed the driving "
"test yet\n"
"        Driver john = new Driver( \"John Doe\" );\n"
"        john.setAge( 18 );\n"
"        car.setDriver( john );\n"
"        constraintViolations = validator.validate( car, DriverChecks."
"class );\n"
"        assertEquals( 1, constraintViolations.size() );\n"
"        assertEquals( \"You first have to pass the driving test\", "
"constraintViolations.iterator().next().getMessage() );\n"
"\n"
"        // ok, John passes the test\n"
"        john.passedDrivingTest( true );\n"
"        assertEquals( 0, validator.validate( car, DriverChecks.class ).size"
"() );\n"
"\n"
"        // just checking that everything is in order now\n"
"        assertEquals( 0, validator.validate( car, Default.class, CarChecks."
"class, DriverChecks.class ).size() );\n"
"    }\n"
"}"
msgstr ""

#. Tag: para
#: usingvalidator.xml:588
#, no-c-format
msgid ""
"First we create a car and validate it using no explicit group. There are no "
"validation errors, even though the property "
"<property>passedVehicleInspection</property> is per default <constant>false</"
"constant>. However, the constraint defined on this property does not belong "
"to the default group. Next we just validate the <classname>CarChecks</"
"classname> group which will fail until we make sure that the car passes the "
"vehicle inspection. When we then add a driver to the car and validate "
"against <classname>DriverChecks</classname> we get again a constraint "
"violation due to the fact that the driver has not yet passed the driving "
"test. Only after setting <property>passedDrivingTest</property> to true the "
"validation against <classname>DriverChecks</classname> will pass."
msgstr ""

#. Tag: para
#: usingvalidator.xml:601
#, no-c-format
msgid ""
"Last but not least, we show that all constraints are passing by validating "
"against all defined groups."
msgstr ""

#. Tag: title
#: usingvalidator.xml:605
#, no-c-format
msgid "Group sequences"
msgstr ""

#. Tag: para
#: usingvalidator.xml:607
#, no-c-format
msgid ""
"By default, constraints are evaluated in no particular order and this "
"regardless of which groups they belong to. In some situations, however, it "
"is useful to control the order of the constraints evaluation. In our example "
"from <xref linkend=\"validator-usingvalidator-validationgroups\"/> we could "
"for example require that first all default car constraints are passing "
"before we check the road worthiness of the car. Finally before we drive away "
"we check the actual driver constraints. In order to implement such an order "
"one would define a new interface and annotate it with "
"<classname>@GroupSequence</classname> defining the order in which the groups "
"have to be validated."
msgstr ""

#. Tag: para
#: usingvalidator.xml:620
#, no-c-format
msgid ""
"If at least one constraints fails in a sequenced group none of the "
"constraints of the following groups in the sequence get validated."
msgstr ""

#. Tag: title
#: usingvalidator.xml:626
#, no-c-format
msgid "Interface with @GroupSequence"
msgstr ""

#. Tag: programlisting
#: usingvalidator.xml:628
#, no-c-format
msgid ""
"@GroupSequence({Default.class, CarChecks.class, DriverChecks.class})\n"
"public interface OrderedChecks {\n"
"}"
msgstr ""

#. Tag: para
#: usingvalidator.xml:632
#, no-c-format
msgid ""
"Groups defining a sequence and groups composing a sequence must not be "
"involved in a cyclic dependency either directly or indirectly, either "
"through cascaded sequence definition or group inheritance. If a group "
"containing such a circularity is evaluated, a "
"<classname>GroupDefinitionException</classname> is raised."
msgstr ""

#. Tag: para
#: usingvalidator.xml:636
#, no-c-format
msgid ""
"The usage of the new sequence could then look like in <xref linkend="
"\"example-group-sequence\"/>."
msgstr ""

#. Tag: title
#: usingvalidator.xml:641
#, no-c-format
msgid "Usage of a group sequence"
msgstr ""

#. Tag: programlisting
#: usingvalidator.xml:643
#, no-c-format
msgid ""
"@Test\n"
"public void testOrderedChecks() {\n"
"    Car car = new Car( \"Morris\", \"DD-AB-123\", 2 );\n"
"    car.setPassedVehicleInspection( true );\n"
"\n"
"    Driver john = new Driver( \"John Doe\" );\n"
"    john.setAge( 18 );\n"
"    john.passedDrivingTest( true );\n"
"    car.setDriver( john );\n"
"\n"
"    assertEquals( 0, validator.validate( car, OrderedChecks.class ).size"
"() );\n"
"}"
msgstr ""

#. Tag: title
#: usingvalidator.xml:648
#, no-c-format
msgid "Redefining the default group sequence of a class"
msgstr ""

#. Tag: para
#: usingvalidator.xml:650
#, no-c-format
msgid ""
"The @GroupSequence annotation also fulfills a second purpose. It allows you "
"to redefine what the Default group means for a given class. To redefine "
"<classname>Default</classname> for a class, place a "
"<classname>@GroupSequence</classname> annotation on the class. The defined "
"groups in the annotation express the sequence of groups that substitute "
"<classname>Default</classname> for this class. <xref linkend=\"example-"
"rental-car\"/> introduces a new class RentalCar with a redfined default "
"group. With this definition the check for all three groups can be rewritten "
"as seen in <xref linkend=\"example-testOrderedChecksWithRedefinedDefault\"/>."
msgstr ""

#. Tag: title
#: usingvalidator.xml:662
#, no-c-format
msgid "RentalCar"
msgstr ""

#. Tag: programlisting
#: usingvalidator.xml:664
#, no-c-format
msgid ""
"@GroupSequence({ RentalCar.class, CarChecks.class })\n"
"public class RentalCar extends Car {\n"
"    public RentalCar(String manufacturer, String licencePlate, int "
"seatCount) {\n"
"        super( manufacturer, licencePlate, seatCount );\n"
"    }\n"
"}"
msgstr ""

#. Tag: title
#: usingvalidator.xml:668
#, no-c-format
msgid "testOrderedChecksWithRedefinedDefault"
msgstr ""

#. Tag: programlisting
#: usingvalidator.xml:670
#, no-c-format
msgid ""
"@Test\n"
"public void testOrderedChecksWithRedefinedDefault() {\n"
"    RentalCar rentalCar = new RentalCar( \"Morris\", \"DD-AB-123\", 2 );\n"
"    rentalCar.setPassedVehicleInspection( true );\n"
"\n"
"    Driver john = new Driver( \"John Doe\" );\n"
"    john.setAge( 18 );\n"
"    john.passedDrivingTest( true );\n"
"    rentalCar.setDriver( john );\n"
"\n"
"    assertEquals( 0, validator.validate( rentalCar, Default.class, "
"DriverChecks.class ).size() );\n"
"}"
msgstr ""

#. Tag: para
#: usingvalidator.xml:674
#, no-c-format
msgid ""
"Due to the fact that there cannot be a cyclic dependency in the group and "
"group sequence definitions one cannot just add <classname>Default</"
"classname> to the sequence redefining <classname>Default</classname> for a "
"class. Instead the class itself should be added!"
msgstr ""

#. Tag: title
#: usingvalidator.xml:684 usingvalidator.xml:692
#, no-c-format
msgid "Built-in constraints"
msgstr ""

#. Tag: para
#: usingvalidator.xml:686
#, no-c-format
msgid ""
"Hibernate Validator implements all of the default constraints specified in "
"Bean Validation as well as some custom ones. <xref linkend=\"table-builtin-"
"constraints\"/> list all constraints available in Hibernate Validator."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:699
#, no-c-format
msgid "Annotation"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:701
#, no-c-format
msgid "Part of Bean Validation Specification"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:703
#, no-c-format
msgid "Apply on"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:705
#, no-c-format
msgid "<entry>Use</entry>"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:707
#, no-c-format
msgid "Hibernate Metadata impact"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:713
#, no-c-format
msgid "@AssertFalse"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:715 usingvalidator.xml:728 usingvalidator.xml:758
#: usingvalidator.xml:778 usingvalidator.xml:798 usingvalidator.xml:830
#: usingvalidator.xml:858 usingvalidator.xml:876 usingvalidator.xml:894
#: usingvalidator.xml:936 usingvalidator.xml:949 usingvalidator.xml:963
#: usingvalidator.xml:995 usingvalidator.xml:1049
#, no-c-format
msgid "<entry>yes</entry>"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:717 usingvalidator.xml:730 usingvalidator.xml:896
#: usingvalidator.xml:909 usingvalidator.xml:938
#, no-c-format
msgid "field/property"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:719
#, no-c-format
msgid "Check that the annotated element is <constant>false</constant>."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:722 usingvalidator.xml:735 usingvalidator.xml:752
#: usingvalidator.xml:772 usingvalidator.xml:792 usingvalidator.xml:824
#: usingvalidator.xml:838 usingvalidator.xml:916 usingvalidator.xml:930
#: usingvalidator.xml:943 usingvalidator.xml:957 usingvalidator.xml:971
#: usingvalidator.xml:989 usingvalidator.xml:1026 usingvalidator.xml:1043
#: usingvalidator.xml:1059
#, no-c-format
msgid "none"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:726
#, no-c-format
msgid "@AssertTrue"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:732
#, no-c-format
msgid "Check that the annotated element is <constant>true</constant>."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:739
#, no-c-format
msgid "@CreditCardNumber"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:741 usingvalidator.xml:817 usingvalidator.xml:844
#: usingvalidator.xml:907 usingvalidator.xml:922 usingvalidator.xml:977
#: usingvalidator.xml:1011 usingvalidator.xml:1032
#, no-c-format
msgid "<entry>no</entry>"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:743 usingvalidator.xml:1034
#, no-c-format
msgid "field/property. The supported type is <classname>String</classname>."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:746
#, no-c-format
msgid ""
"Check that the annotated string passes the Luhn checksum test. Note, this "
"validation aims to check for user mistake, not credit card validity! See "
"also <ulink url=\"http://www.merriampark.com/anatomycc.htm\">Anatomy of "
"Credit Card Numbers</ulink>."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:756
#, no-c-format
msgid "@DecimalMax"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:760 usingvalidator.xml:780 usingvalidator.xml:800
#: usingvalidator.xml:860 usingvalidator.xml:878 usingvalidator.xml:979
#, no-c-format
msgid ""
"field/property. Supported types are <classname>BigDecimal</classname>, "
"<classname>BigInteger</classname>, <classname>String</classname>, "
"<classname>byte</classname>, <classname>short</classname>, <classname>int</"
"classname>, <classname>long</classname> and the respective wrappers of the "
"primitive types."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:767
#, no-c-format
msgid ""
"The annotated element must be a number whose value must be lower or equal to "
"the specified maximum. The parameter value is the string representation of "
"the max value according to the <classname>BigDecimal</classname> string "
"representation."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:776
#, no-c-format
msgid "@DecimalMin"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:787
#, no-c-format
msgid ""
"The annotated element must be a number whose value must be higher or equal "
"to the specified minimum. The parameter value is the string representation "
"of the min value according to the <classname>BigDecimal</classname> string "
"representation."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:796
#, no-c-format
msgid "@Digits(integer=, fraction=)"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:807
#, no-c-format
msgid ""
"Check whether the property is a number having up to <literal>integer</"
"literal> digits and <literal>fraction</literal> fractional digits."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:811
#, no-c-format
msgid "Define column precision and scale."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:815
#, no-c-format
msgid "@Email"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:819 usingvalidator.xml:846 usingvalidator.xml:965
#, no-c-format
msgid "field/property. Needs to be a string."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:821
#, no-c-format
msgid "Check whether the specified string is a valid email address."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:828
#, no-c-format
msgid "@Future"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:832 usingvalidator.xml:951
#, no-c-format
msgid ""
"field/property. Supported types are <classname>java.util.Date</classname> "
"and <classname>java.util.Calendar</classname>."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:836
#, no-c-format
msgid "Checks whether the annotated date is in the future."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:842
#, no-c-format
msgid "@Length(min=, max=)"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:848
#, no-c-format
msgid ""
"Validate that the annotated string is between <parameter>min</parameter> and "
"<parameter>max</parameter> included."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:852 usingvalidator.xml:1005
#, no-c-format
msgid "Column length will be set to max."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:856
#, no-c-format
msgid "@Max"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:867
#, no-c-format
msgid ""
"Checks whether the annotated value is less than or equal to the specified "
"maximum."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:870 usingvalidator.xml:888
#, no-c-format
msgid "Add a check constraint on the column."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:874
#, no-c-format
msgid "@Min"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:885
#, no-c-format
msgid ""
"Checks whether the annotated value is higher than or equal to the specified "
"minimum."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:892
#, no-c-format
msgid "@NotNull"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:898
#, no-c-format
msgid "Check that the annotated value is not <constant>null.</constant>"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:901
#, no-c-format
msgid "Column(s) are not null."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:905
#, no-c-format
msgid "@NotBlank"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:911
#, no-c-format
msgid ""
"Check that the annotated string is not null and the trimmed length is "
"greater than 0. The difference to @NotEmpty is that this constraint can only "
"be applied on strings and that trailing whitespaces are ignored."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:920
#, no-c-format
msgid "@NotEmpty"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:924
#, no-c-format
msgid "field/property. Supported types are String, Collection, Map and arrays."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:927
#, no-c-format
msgid ""
"Check whether the annotated element is not <constant>null</constant> nor "
"empty."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:934
#, no-c-format
msgid "@Null"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:940
#, no-c-format
msgid "Check that the annotated value is <constant>null.</constant>"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:947
#, no-c-format
msgid "@Past"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:955
#, no-c-format
msgid "Checks whether the annotated date is in the past."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:961
#, no-c-format
msgid "@Pattern(regex=, flag=)"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:967
#, no-c-format
msgid ""
"Checks if the annotated string matches the regular expression "
"<parameter>regex</parameter> considering the given flag <parameter>match</"
"parameter>."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:975
#, no-c-format
msgid "@Range(min=, max=)"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:986
#, no-c-format
msgid ""
"Check whether the annotated value lies between (inclusive) the specified "
"minimum and maximum."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:993
#, no-c-format
msgid "@Size(min=, max=)"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:997
#, no-c-format
msgid ""
"field/property. Supported types are <classname>String</classname>, "
"<classname>Collection</classname>, <classname>Map</classname> and "
"<classname>arrays</classname>."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:1002
#, no-c-format
msgid "Check if the annotated element size is between min and max (inclusive)."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:1009
#, no-c-format
msgid "@ScriptAssert(lang=, script=, alias=)"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:1013
#, no-c-format
msgid "type"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:1015
#, no-c-format
msgid ""
"Checks whether the given script can successfully be evaluated against the "
"annotated element. In order to use this constraint, an implementation of the "
"Java Scripting API as defined by JSR 223 (\"Scripting for the "
"Java<superscript>TM</superscript> Platform\") must part of the class path. "
"This is automatically the case when running on Java 6. For older Java "
"versions, the JSR 223 RI can be added manually to the class path.The "
"expressions to be evaluated can be written in any scripting or expression "
"language, for which a JSR 223 compatible engine can be found in the class "
"path."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:1030
#, no-c-format
msgid "@URL(protocol=, host=, port=)"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:1037
#, no-c-format
msgid ""
"Check if the annotated string is a valid URL. If any of parameters "
"<parameter>protocol</parameter>, <parameter>host</parameter> or "
"<parameter>port</parameter> is specified the URL must match the specified "
"values in the according part."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:1047
#, no-c-format
msgid "@Valid"
msgstr ""

#. Tag: entry
#: usingvalidator.xml:1051
#, no-c-format
msgid "field/property. Any non-primitive types are supported."
msgstr ""

#. Tag: entry
#: usingvalidator.xml:1054
#, no-c-format
msgid ""
"Performs validation recursively on the associated object. If the object is a "
"collection or an array, the elements are validated recursively. If the "
"object is a map, the value elements are validated recursively."
msgstr ""

#. Tag: para
#: usingvalidator.xml:1066
#, no-c-format
msgid ""
"On top of the parameters indicated in <xref linkend=\"table-builtin-"
"constraints\"/> each constraint supports the parameters <parameter>message</"
"parameter>, <parameter>groups</parameter> and <parameter>payload</"
"parameter>. This is a requirement of the Bean Validation specification."
msgstr ""

#. Tag: para
#: usingvalidator.xml:1073
#, no-c-format
msgid ""
"In some cases these built-in constraints will not fulfill your requirements. "
"In this case you can literally in a minute write your own constraints. We "
"will discuss this in"
msgstr ""
