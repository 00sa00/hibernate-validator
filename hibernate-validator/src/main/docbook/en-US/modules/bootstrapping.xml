<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
  ~ indicated by the @author tags or express copyright attribution
  ~ statements applied by the authors.  All third-party contributions are
  ~ distributed under license by Red Hat Middleware LLC.
  ~
  ~ This copyrighted material is made available to anyone wishing to use, modify,
  ~ copy, or redistribute it subject to the terms and conditions of the GNU
  ~ Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~ for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with this distribution; if not, write to:
  ~ Free Software Foundation, Inc.
  ~ 51 Franklin Street, Fifth Floor
  ~ Boston, MA  02110-1301  USA
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="validator-bootstrapping">
  <title>Bootstrapping</title>

  <para>We already discussed in <xref linkend="section-validator-instance" />
  how to create a <classname>Validator</classname> instance using the
  different methods in <classname>javax.validation.Validation</classname>. In
  this chapter we have a closer look and discuss the different configuration
  possibilties available via the <classname>Configuration</classname>
  object.</para>

  <para>One requirement of the Bean Validation framework is that each
  implementation (including Hibernate Validator) must be able to bootstrap any
  other Bean Validation implementation on the classpath. The available
  providers are discovered by the <ulink
  url="http://java.sun.com/j2se/1.3/docs/guide/jar/jar.html#Service%20Provider">Java
  Service Provider</ulink> mechanism. A Bean Validation implementation
  includes the file
  <filename>javax.validation.spi.ValidationProvider</filename> in
  <filename>META-INF/services</filename>. This file contains the fully
  qualified classname of the <classname>ValidationProvider</classname> of the
  implementation. In the case of Hibernate Validator this is
  <classname>org.hibernate.validator.HibernateValidator</classname>.</para>

  <para><note>
      <para>If there are more than one Bean Validation implementation
      providers in the classpath and
      <methodname>Validation.buildDefaultValidatorFactory()</methodname> is
      used, there is no guarantee which provider will be chosen. To enforce
      the provider <methodname>Validation.byProvider()</methodname> should be
      used. </para>
    </note></para>

  <section>
    <title><classname>ValidationProviderResolver</classname></title>

    <para>The </para>
  </section>

  <section>
    <title><classname>MessageInterpolator</classname></title>

    <para>The message interpolator is provided to the ValidatorFactory at
    construction time using Configuration.messageInterpolator(). This message
    interpolator is shared by all validators gener- ated by this
    ValidatorFactory. It is recommended that MessageInterpolator
    implementations delegate final interpolation to the Bean Validation
    default MessageInterpolator to ensure standard Bean Validation
    interpolation rules are followed. The default implementation is accessible
    through Configuration.getDefaultMessageInterpolator().</para>
  </section>

  <section>
    <title><classname>TraversableResolver</classname></title>

    <para>The Bean Validation provider must not access the state of a
    property, nor validate its constraints if the property is not traversable.
    A property is traversable if TraversableResolver returns true for this
    property.</para>
  </section>

  <section>
    <title><classname>ConstraintValidatorFactory</classname></title>

    <para>The default ConstraintValidatorFactory provided by the Bean
    Validation provider implementation uses the pub- lic constraint no-arg
    constructor. A custom ConstraintValidatorFactory can be provided for
    example to benefit from dependency injection control in constraint
    implementations. Any constraint implementation relying on Con-
    straintValidatorFactory behaviors specific to an implementation
    (dependency injection, no no-arg constructor and so on) are not considered
    portable, hence great care should be given before walking that path.
    ConstraintValidatorFactory should not cache instances as the state of each
    instance can be altered in the ini- tialize method.</para>
  </section>
</chapter>
