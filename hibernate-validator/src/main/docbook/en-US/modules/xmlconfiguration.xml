<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
  ~ indicated by the @author tags or express copyright attribution
  ~ statements applied by the authors.  All third-party contributions are
  ~ distributed under license by Red Hat Middleware LLC.
  ~
  ~ This copyrighted material is made available to anyone wishing to use, modify,
  ~ copy, or redistribute it subject to the terms and conditions of the GNU
  ~ Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~ for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with this distribution; if not, write to:
  ~ Free Software Foundation, Inc.
  ~ 51 Franklin Street, Fifth Floor
  ~ Boston, MA  02110-1301  USA
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="validator-xmlconfiguration">
  <title>XML configuration</title>

  <section>
    <title><filename>validation.xml</filename></title>

    <para>The key to enable XML configuration for Hibernate Validator the the
    file <filename>validation.xml</filename>. If this file exists in the
    classpath it wille be read and its configuration applied when the
    <classname>ValidationFactory</classname> gets created. <xref
    linkend="image-validation-configuration" /> shows a model view of the xsd
    and <xref linkend="example-validation-xml" /> shows the available
    configuration options.<example id="image-validation-configuration">
        <title>validation-configuration-1.0.xsd</title>

        <mediaobject>
          <imageobject role="fo">
            <imagedata align="center"
                       fileref="validation-configuration-1.0.png" scalefit="1" />
          </imageobject>

          <imageobject role="html">
            <imagedata depth="" fileref="validation-configuration-1.0.png"
                       scalefit="1" />
          </imageobject>
        </mediaobject>
      </example></para>

    <example id="example-validation-xml">
      <title>validation.xml</title>

      <programlisting>&lt;validation-config xmlns="http://jboss.org/xml/ns/javax/validation/configuration"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://jboss.org/xml/ns/javax/validation/configuration file:/Users/hardy/work/hibernate/beanvalidation/trunk/validation-api/src/test/resources/validation-configuration-1.0.xsd"&gt;
    &lt;default-provider&gt;org.hibernate.validator.HibernateValidator&lt;/default-provider&gt;
    &lt;message-interpolator&gt;org.hibernate.validator.engine.ResourceBundleMessageInterpolator&lt;/message-interpolator&gt;
    &lt;traversable-resolver&gt;org.hibernate.validator.engine.resolver.DefaultTraversableResolver&lt;/traversable-resolver&gt;
    &lt;constraint-validator-factory&gt;org.hibernate.validator.engine.ConstraintValidatorFactoryImpl&lt;/constraint-validator-factory&gt;
    &lt;constraint-mapping&gt;/constraints-car.xml&lt;/constraint-mapping&gt;
    &lt;property name="prop1"&gt;value1&lt;/property&gt;
    &lt;property name="prop2"&gt;value2&lt;/property&gt;
&lt;/validation-config&gt;</programlisting>
    </example>

    <warning>
      <para>There can only be one <filename>validation.xml</filename> in the
      classpath. If more than one is found an exception is thrown.</para>
    </warning>

    <para>All settings shown in the <filename>validation.xml</filename> are
    optional and in the case of <xref linkend="example-validation-xml" /> show
    the defaults used within Hibernate Validator. The node
    <property>default-provider</property> allows to chose the Bean Validation
    provider to use. This is especially useful if there are more than one
    providers in the classpath. <property>message-interpolator</property>,
    <property>traversable-resolver</property> and
    <property>constraint-validator-factory</property> allow to customize the
    <classname>javax.validation.MessageInterpolator</classname>,
    <classname>javax.validation.TraversableResolver</classname> resp.
    <classname>javax.validation.ConstraintValidatorFactory</classname> to use.
    These are the same configuration option as available programmatically
    through the <classname>javax.validation.Configuration</classname>. In fact
    XML configuration will be overriden by values explicitly specified via the
    API. It is even possible to ignore the xml configuration completely via
    <methodname> Configuration.ignoreXmlConfiguration()</methodname>. See also
    <xref linkend="validator-bootstrapping" />.</para>

    <para>Via the <property>constraint-mapping</property> you can list an
    abritrary number of additional xml files containing the actual constraint
    configuration. See <xref linkend="section-mapping-constraints" />. </para>

    <para>Last but not least, you can specify provider specific properties via
    the <property>property</property> nodes. Hibernate Validator does
    currently not make use of any custom properties.</para>
  </section>

  <section>
    <title id="section-mapping-constraints">Mapping constraints</title>

    <para>Expressing constraint in XML is possible via files adhering to the
    xsd seen in <xref linkend="image-mapping-configuration" />. Note that
    these mapping files are only processed if listed via
    <property>constraint-mapping</property> in your
    <filename>validation.xml</filename>. </para>

    <example id="image-mapping-configuration">
      <title>validation-mapping-1.0.xsd</title>

      <mediaobject>
        <imageobject role="fo">
          <imagedata align="center" fileref="validation-mapping-1.0.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="html">
          <imagedata depth="" fileref="validation-mapping-1.0.png"
                     scalefit="1" />
        </imageobject>
      </mediaobject>
    </example>

    <para><xref linkend="example-constraints-car" /> shows exemplary how our
    classes Car and RentalCar from <xref linkend="example-car" /> resp. <xref
    linkend="example-rental-car" /> could be mapped in xml.</para>

    <example id="example-constraints-car">
      <title>constraints-car.xml</title>

      <programlisting>&lt;constraint-mappings xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                     xsi:schemaLocation="http://jboss.org/xml/ns/javax/validation/mapping validation-mapping-1.0.xsd"
                     xmlns="http://jboss.org/xml/ns/javax/validation/mapping"&gt;
    &lt;default-package&gt;org.hibernate.validator.quickstart&lt;/default-package&gt;
    &lt;bean class="Car" ignore-annotations="true"&gt;
        &lt;class ignore-annotations="true"&gt;
        &lt;field name="manufacturer"&gt;
            &lt;constraint annotation="javax.validation.constraints.NotNull"/&gt;
        &lt;/field&gt;
        &lt;field name="licensePlate"&gt;
            &lt;constraint annotation="javax.validation.constraints.NotNull"/&gt;
        &lt;/field&gt;
        &lt;field name="seatCount"&gt;
            &lt;constraint annotation="javax.validation.constraints.Min"&gt;
                &lt;element name="value"&gt;2&lt;/element&gt;
            &lt;/constraint&gt;
        &lt;/field&gt;
        &lt;field name="driver"&gt;
            &lt;valid/&gt;
        &lt;/field&gt;
        &lt;getter name="passedVehicleInspection" ignore-annotations="true"&gt;
            &lt;constraint annotation="javax.validation.constraints.AssertTrue"&gt;
                &lt;message&gt;The car has to pass the vehicle inspection first&lt;/message&gt;
                &lt;groups&gt;
                    &lt;value&gt;CarChecks&lt;/value&gt;
                &lt;/groups&gt;
                &lt;element name="max"&gt;10&lt;/element&gt;
            &lt;/constraint&gt;
        &lt;/getter&gt;
    &lt;/bean&gt;
    &lt;bean class="RentalCar" ignore-annotations="true"&gt;
        &lt;class ignore-annotations="true"&gt;
            &lt;group-sequence&gt;
                &lt;value&gt;RentalCar&lt;/value&gt;
                &lt;value&gt;CarChecks&lt;/value&gt;
            &lt;/group-sequence&gt;
        &lt;/class&gt;
    &lt;/bean&gt;
    &lt;constraint-definition annotation="org.mycompany.CheckCase"&gt;
        &lt;validated-by include-existing-validators="false"&gt;
            &lt;value&gt;org.mycompany.CheckCaseValidator&lt;/value&gt;
        &lt;/validated-by&gt;
    &lt;/constraint-definition&gt;
&lt;/constraint-mappings&gt;</programlisting>
    </example>

    <para>The mapping xml is closely related to the programmatic API. For this
    reason it should suffice to add some comments regarding the
    configuration.</para>
  </section>
</chapter>
